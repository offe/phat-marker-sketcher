import * as React from "react";
import MyCanvas from "./MyCanvas";

const drawSquiggleStrokeWord = function (ctx) {
  ctx.save();
  ctx.beginPath();
  ctx.moveTo(0, 0);
  ctx.lineTo(109.65317, 0);
  ctx.lineTo(109.65317, 31.029236);
  ctx.lineTo(0, 31.029236);
  ctx.closePath();
  ctx.clip();
  ctx.translate(0, 0);
  ctx.translate(0, 0);
  ctx.scale(1, 1);
  ctx.translate(0, 0);
  ctx.strokeStyle = "rgba(0,0,0,0)";
  ctx.lineCap = "butt";
  ctx.lineJoin = "miter";
  ctx.miterLimit = 4;
  ctx.save();
  ctx.translate(-878.36032, -93.527492);
  ctx.save();
  ctx.fillStyle = "rgba(0, 0, 0, 0)";
  ctx.strokeStyle = "#000000";
  ctx.lineWidth = 6;
  ctx.lineCap = "round";
  ctx.lineJoin = "round";
  ctx.beginPath();
  ctx.moveTo(983.33203, 114.75586);
  ctx.bezierCurveTo(
    981.4511600000001,
    113.39038,
    980.16659,
    111.14272,
    980.29348,
    108.78252
  );
  ctx.bezierCurveTo(
    980.34518,
    106.96336000000001,
    981.03431,
    105.04846,
    980.31248,
    103.28906
  );
  ctx.bezierCurveTo(
    980.06014,
    102.8512,
    979.50905,
    103.63193000000001,
    979.15785,
    103.76062
  );
  ctx.bezierCurveTo(
    976.61355,
    105.72552,
    974.5816900000001,
    108.25226,
    972.2504,
    110.45118000000001
  );
  ctx.bezierCurveTo(
    970.79567,
    111.81481000000001,
    969.32206,
    113.25450000000001,
    967.51365,
    114.13086000000001
  );
  ctx.bezierCurveTo(
    964.87816,
    115.1924,
    961.73804,
    113.43867000000002,
    960.88865,
    110.80859000000001
  );
  ctx.bezierCurveTo(
    959.84788,
    108.31110000000001,
    960.41594,
    105.54757000000001,
    959.8713,
    102.96234000000001
  );
  ctx.bezierCurveTo(
    959.7728000000001,
    102.33785000000002,
    959.71687,
    101.69373000000002,
    959.2031000000001,
    101.60742000000002
  );
  ctx.bezierCurveTo(
    958.2737400000001,
    101.62262000000001,
    957.2655100000001,
    103.46082000000001,
    956.28615,
    104.36940000000001
  );
  ctx.bezierCurveTo(
    952.61386,
    108.29689000000002,
    949.51471,
    110.78962000000001,
    945.37107,
    114.25781
  );
  ctx.bezierCurveTo(
    943.7892800000001,
    115.46314000000001,
    941.33209,
    115.56320000000001,
    939.8906000000001,
    114.07422000000001
  );
  ctx.bezierCurveTo(
    938.30014,
    112.53523000000001,
    937.9093700000001,
    112.25988000000001,
    937.2324000000001,
    110.24414000000002
  );
  ctx.bezierCurveTo(
    936.4358100000001,
    107.48881000000002,
    936.1863500000001,
    103.17129000000001,
    934.6889800000001,
    100.67853000000002
  );
  ctx.bezierCurveTo(
    934.1990600000001,
    100.39412000000003,
    933.8342600000001,
    100.48339000000003,
    933.4475000000001,
    100.66953000000002
  );
  ctx.bezierCurveTo(
    930.6668700000001,
    103.15961000000003,
    928.3386900000002,
    108.10305000000002,
    925.6086300000001,
    110.64584000000002
  );
  ctx.bezierCurveTo(
    924.5206400000001,
    111.67441000000002,
    923.31637,
    112.82969000000003,
    921.74607,
    112.93318000000002
  );
  ctx.bezierCurveTo(
    919.80586,
    113.20144000000002,
    918.1383500000001,
    111.65693000000002,
    917.39842,
    109.98982000000002
  );
  ctx.bezierCurveTo(
    916.01103,
    107.30989000000002,
    915.17402,
    104.34573000000002,
    914.92898,
    101.34343000000003
  );
  ctx.bezierCurveTo(
    914.6778800000001,
    100.47314000000003,
    914.19505,
    99.22462000000003,
    913.42771,
    99.05818400000003
  );
  ctx.bezierCurveTo(
    912.41796,
    99.07156400000002,
    911.0081200000001,
    100.52755000000002,
    910.11185,
    102.00844000000002
  );
  ctx.bezierCurveTo(
    908.92236,
    104.10026000000002,
    906.27773,
    110.84490000000002,
    903.77171,
    112.62391000000002
  );
  ctx.bezierCurveTo(
    902.69612,
    113.33068000000003,
    901.32719,
    113.51909000000002,
    900.12303,
    113.05428000000002
  );
  ctx.bezierCurveTo(
    898.6258,
    112.71232000000002,
    897.83386,
    107.24275000000002,
    897.5023199999999,
    105.86040000000003
  );
  ctx.bezierCurveTo(
    896.3418899999999,
    102.22718000000003,
    896.09015,
    97.79125900000003,
    894.91085,
    97.54347900000002
  );
  ctx.bezierCurveTo(
    893.02953,
    97.61998900000002,
    892.6630299999999,
    101.41759000000002,
    891.3858,
    103.38528000000002
  );
  ctx.bezierCurveTo(
    889.24593,
    106.91469000000002,
    887.21669,
    110.57664000000003,
    885.2233,
    114.25971000000003
  );
  ctx.stroke();
  ctx.restore();
  ctx.restore();
  ctx.restore();
};

const drawSquiggleWord = function (ctx) {
  ctx.save();
  ctx.beginPath();
  ctx.moveTo(0, 0);
  ctx.lineTo(109.65317, 0);
  ctx.lineTo(109.65317, 31.029236);
  ctx.lineTo(0, 31.029236);
  ctx.closePath();
  ctx.clip();
  ctx.translate(0, 0);
  ctx.translate(0, 0);
  ctx.scale(1, 1);
  ctx.translate(0, 0);
  ctx.strokeStyle = "rgba(0,0,0,0)";
  ctx.lineCap = "butt";
  ctx.lineJoin = "miter";
  ctx.miterLimit = 4;
  ctx.save();
  ctx.translate(-878.36032, -93.527492);
  ctx.save();
  ctx.fillStyle = "#000000";
  ctx.lineWidth = 1;
  ctx.beginPath();
  ctx.moveTo(879.56018, 123.41315);
  ctx.bezierCurveTo(
    877.1972199999999,
    121.498,
    878.0699599999999,
    118.63882,
    884.4731099999999,
    107.31809
  );
  ctx.bezierCurveTo(
    890.9494299999999,
    95.867972,
    892.8691399999999,
    93.527492,
    895.7844399999999,
    93.527492
  );
  ctx.bezierCurveTo(
    898.3475999999999,
    93.527492,
    899.8879599999999,
    95.82409799999999,
    900.5731499999999,
    100.6672
  );
  ctx.bezierCurveTo(
    900.9003799999999,
    102.98017999999999,
    901.3222499999999,
    105.04343999999999,
    901.51063,
    105.25224999999999
  );
  ctx.bezierCurveTo(
    901.69902,
    105.46105999999999,
    903.55073,
    103.59279999999998,
    905.62555,
    101.10055999999999
  );
  ctx.bezierCurveTo(
    909.67959,
    96.23093199999998,
    911.35906,
    94.99817999999999,
    913.93931,
    94.99817999999999
  );
  ctx.bezierCurveTo(
    916.11672,
    94.99817999999999,
    919.01757,
    98.83173899999998,
    919.01757,
    101.70925999999999
  );
  ctx.bezierCurveTo(
    919.01757,
    103.50906999999998,
    920.39915,
    107.63998999999998,
    921.42619,
    108.91102999999998
  );
  ctx.bezierCurveTo(
    921.56349,
    109.08100999999998,
    924.02881,
    106.68184999999998,
    926.90472,
    103.57974999999999
  );
  ctx.bezierCurveTo(
    931.06927,
    99.08765,
    932.53931,
    97.939574,
    934.1266,
    97.939574
  );
  ctx.bezierCurveTo(
    937.4551700000001,
    97.939574,
    938.90336,
    99.94543499999999,
    940.47657,
    106.73482
  );
  ctx.bezierCurveTo(
    941.26256,
    110.12682,
    942.2391,
    113.02296,
    942.64666,
    113.17067
  );
  ctx.bezierCurveTo(
    943.05423,
    113.31831,
    946.02158,
    110.25877,
    949.24078,
    106.37155
  );
  ctx.bezierCurveTo(
    952.45998,
    102.48434,
    955.8636399999999,
    98.862663,
    956.80446,
    98.323406
  );
  ctx.bezierCurveTo(
    960.7664,
    96.05248800000001,
    964.13028,
    99.208433,
    964.13028,
    105.19639000000001
  );
  ctx.bezierCurveTo(
    964.13028,
    108.8588,
    964.6646,
    110.44049000000001,
    965.90183,
    110.44049000000001
  );
  ctx.bezierCurveTo(
    966.43322,
    110.44049000000001,
    969.16561,
    108.01454000000001,
    971.9738100000001,
    105.04948000000002
  );
  ctx.bezierCurveTo(
    977.5670900000001,
    99.14379200000002,
    979.9401100000001,
    97.94240100000002,
    982.43411,
    99.75369400000002
  );
  ctx.bezierCurveTo(
    984.3297200000001,
    101.13040000000002,
    984.99636,
    103.65383000000003,
    984.45527,
    107.40441000000003
  );
  ctx.bezierCurveTo(
    984.09833,
    109.87869000000002,
    984.27056,
    110.35863000000003,
    986.0340500000001,
    111.80378000000003
  );
  ctx.bezierCurveTo(
    987.3017800000001,
    112.84268000000003,
    988.01349,
    114.07898000000003,
    988.01349,
    115.24225000000003
  );
  ctx.bezierCurveTo(
    988.01349,
    117.44748000000003,
    985.86026,
    120.00000000000003,
    984.0000100000001,
    120.00000000000003
  );
  ctx.bezierCurveTo(
    981.9810600000001,
    120.00000000000003,
    979.0380600000001,
    118.10107000000002,
    977.5515800000001,
    115.83921000000002
  );
  ctx.lineTo(976.23985, 113.84328000000002);
  ctx.lineTo(973.39422, 116.54309000000002);
  ctx.bezierCurveTo(
    968.61373,
    121.07864000000002,
    963.1876,
    121.11215000000001,
    959.1448300000001,
    116.63099000000003
  );
  ctx.bezierCurveTo(
    957.8731300000001,
    115.22142000000002,
    956.8326500000001,
    113.51042000000002,
    956.8326500000001,
    112.82879000000003
  );
  ctx.bezierCurveTo(
    956.8326500000001,
    111.99748000000002,
    955.5767300000001,
    112.93717000000002,
    953.01796,
    115.68282000000002
  );
  ctx.bezierCurveTo(
    950.9199,
    117.93418000000003,
    948.20441,
    120.53347000000002,
    946.98356,
    121.45903000000003
  );
  ctx.bezierCurveTo(
    944.1394,
    123.61526000000002,
    940.37424,
    123.66543000000003,
    937.7349,
    121.58224000000003
  );
  ctx.bezierCurveTo(
    935.8076100000001,
    120.06112000000003,
    932.94943,
    114.50925000000002,
    932.94943,
    112.28673000000003
  );
  ctx.bezierCurveTo(
    932.94943,
    110.50240000000004,
    932.30223,
    110.92532000000003,
    927.95982,
    115.54719000000003
  );
  ctx.bezierCurveTo(
    921.2352900000001,
    122.70447000000003,
    918.4827300000001,
    122.30788000000003,
    913.98968,
    113.53433000000003
  );
  ctx.lineTo(911.24346, 108.17181000000002);
  ctx.lineTo(909.31904, 110.59294000000003);
  ctx.bezierCurveTo(
    903.60899,
    117.77682000000003,
    898.79553,
    118.17721000000003,
    894.71394,
    111.80778000000002
  );
  ctx.lineTo(893.2983899999999, 109.59877000000002);
  ctx.lineTo(890.7839099999999, 114.24781000000002);
  ctx.bezierCurveTo(
    885.3942199999999,
    124.21286000000002,
    882.9797099999998,
    126.18453000000001,
    879.5601799999998,
    123.41301000000001
  );
  ctx.closePath();
  ctx.fill();
  ctx.stroke();
  ctx.restore();
  ctx.restore();
  ctx.restore();
};

export default function SketchArea() {
  const draw = (ctx, frameCount) => {
    console.log("draw called");
    //ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.fillStyle = "#e8e8e8";
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

    const gridSize = 20;
    ctx.fillStyle = "#ffffff";
    ctx.fillRect(1.5 * gridSize, 1.5 * gridSize, 20 * gridSize, 15 * gridSize);

    /*
    // Draw border for testing
    ctx.beginPath();
    ctx.strokeStyle = "#000000";
    ctx.lineWidth = "6";
    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.stroke();
    */

    ctx.fillStyle = "#d0d0d0";
    for (let y = 0; y < ctx.canvas.height / gridSize; y++) {
      for (let x = 0; x < ctx.canvas.width / gridSize; x++) {
        ctx.fillRect(gridSize * (x + 0.5), gridSize * (y + 0.5), 2, 2);
      }
    }

    ctx.save();
    ctx.translate(50, 50);
    //drawSquiggleWord(ctx);
    drawSquiggleStrokeWord(ctx);
    ctx.restore();

    ctx.beginPath();
    ctx.strokeStyle = "#000000";
    ctx.lineWidth = "6";
    ctx.lineCap = "rounded";
    //ctx.rect(gridSize * 3.5, gridSize * 4.5, gridSize * 15, gridSize * 10);
    ctx.roundRect(
      gridSize * 3.5,
      gridSize * 4.5,
      gridSize * 15,
      gridSize * 10,
      6
    );
    ctx.stroke();

    /*
    ctx.fillStyle = "#000000";
    ctx.beginPath();
    ctx.arc(50, 100, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);
    ctx.fill();
    */
  };
  return <MyCanvas draw={draw} />;
}
